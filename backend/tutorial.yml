---
- title: Hello World
  content: Let us start with our first Hello World program
  code: "program hello\r\n  ! This is a comment line; it is ignored by the compiler\r\n
    \ print *, 'Hello, World!'\r\nend program hello\r\n"
- title: Declaring variables
  content: Variable names must start with a letter and can consist of letters, numbers and underscores. In the following example we declare a variable for each of the built-in types.
  code: "program variables\r\n  implicit none\r\n\r\n  integer :: amount\r\n  real :: pi\r\n  complex :: frequency\r\n  character :: initial\r\n  logical :: isOkay\r\n\r\nend program variables"
- title: Declaring variables
  content: Once we have declared a variable, we can assign and reassign values to it using the assignment operator =.
  code: "program variables\r\n  implicit none\r\n\r\n  integer :: amount\r\n  real :: pi\r\n  complex :: frequency\r\n  character :: initial\r\n  logical :: isOkay\r\n\r\n  amount = 10\r\n  pi = 3.1415927\r\n  frequency = (1.0, -0.5)\r\n  initial = 'A'\r\n  isOkay = .false.\r\nend program variables"
- title: Standard output
  content: We can use the print statement introduced earlier to print variable values to stdout
  code: "program variables\r\n  implicit none\r\n\r\n  integer :: amount\r\n  real :: pi\r\n  complex :: frequency\r\n  character :: initial\r\n  logical :: isOkay\r\n\r\n  amount = 10\r\n  pi = 3.1415927\r\n  frequency = (1.0, -0.5)\r\n  initial = 'A'\r\n  isOkay = .false.\r\n  \r\n  print *, 'The value of amount (integer) is: ', amount\r\n  print *, 'The value of pi (real) is: ', pi\r\n\r\nend program variables"
- title: Standard input
  content: In a similar way, we can read values from the command window using the read statement. Enter values in the box below.
  code: "program read_value\r\n  implicit none\r\n  integer :: age\r\n\r\n  print *, 'Please enter your age: '\r\n  read(*,*) age\r\n\r\n  print *, 'Your age is: ', age\r\n\r\nend program read_value"
- title: Expressions
  content: |
          The usual set of arithmetic operators are available, listed in order or precedence - 
           ** - Exponent
            * - Multiplication
             / - Division
             + - Addition
              - - Subtraction
              
  code: "program arithmetic\r\n  implicit none\r\n\r\n  real :: pi\r\n  real :: radius\r\n  real :: height\r\n  real :: area\r\n  real :: volume\r\n\r\n  pi = 3.1415927\r\n\r\n  print *, 'Enter cylinder base radius:'\r\n  read(*,*) radius\r\n\r\n  print *, 'Enter cylinder height:'\r\n  read(*,*) height\r\n\r\n  area = pi * radius**2.0\r\n  volume = area * height\r\n\r\n  print *, 'Cylinder radius is: ', radius\r\n  print *, 'Cylinder height is: ', height\r\n  print *, 'Cylinder base area is: ', area\r\n  print *, 'Cylinder volume is: ', volume\r\n\r\nend program arithmetic"

- title: Floating-point precision
  content: The desired floating-point precision can be explicitly declared using a kind parameter. The iso_fortran_env intrinsic module provides kind parameters for the common 32-bit and 64-bit floating-point types.
  code: "program float\r\n  use, intrinsic :: iso_fortran_env, only: sp=>real32, dp=>real64\r\n  implicit none\r\n\r\n  real(sp) :: float32\r\n  real(dp) :: float64\r\n\r\n  float32 = 1.0_sp  ! Explicit suffix for literal constants\r\n  float64 = 1.0_dp\r\n\r\nend program float"

- title: Arrays and strings
  content: | 
   More often than not, we need to store and operate on long lists of numbers as opposed to just the single scalar variables that we have been using so far; in computer programming such lists are called arrays.
   Arrays are multidimensional variables that contain more than one value where each value is accessed using one or more indices. 
   There are two common notations for declaring array variables using the dimension attribute or by appending the array dimensions in parentheses to the variable name.

  code: "program arrays\r\n  implicit none\r\n\r\n  ! 1D integer array\r\n  integer, dimension(10) :: array1\r\n\r\n  ! An equivalent array declaration\r\n  integer :: array2(10)\r\n\r\n  ! 2D real array\r\n  real, dimension(10, 10) :: array3\r\n\r\n  ! Custom lower and upper index bounds\r\n  real :: array4(0:9)\r\n  real :: array5(-5:5)\r\n\r\nend program arrays\r\n"

- title: Array slicing
  content: A powerful feature of the Fortran language is its built-in support for array operations; we can perform operations on all or part of an array using array slicing notation
  code: "program array_slice\r\n  implicit none\r\n\r\n  integer :: i\r\n  integer :: array1(10)  ! 1D integer array of 10 elements\r\n  integer :: array2(10, 10)  ! 2D integer array of 100 elements\r\n\r\n  array1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  ! Array constructor\r\n  array1 = [(i, i = 1, 10)]  ! Implied do loop constructor\r\n  array1(:) = 0  ! Set all elements to zero\r\n  array1(1:5) = 1  ! Set first five elements to one\r\n  array1(6:) = 1  ! Set all elements after five to one\r\n\r\n  print *, array1(1:10:2)  ! Print out elements at odd indices\r\n  print *, array2(:,1)  ! Print out the first column in a 2D array\r\n  print *, array1(10:1:-1)  ! Print an array in reverse\r\n\r\nend program array_slice\r\n"

- title: Allocatable (dynamic) arrays
  content: |
      So far we have specified the size of our array in our program codeâ€”this type of array is known as a static array since its size is fixed when we compile our program.
      Quite often, we do not know how big our array needs to be until we run our program, for example, if we are reading data from a file of unknown size.
      For this problem, we need allocatable arrays. These are allocated while the program is running once we know how big the array needs to be.
  code: "program allocatable\r\n  implicit none\r\n\r\n  integer, allocatable :: array1(:)\r\n  integer, allocatable :: array2(:,:)\r\n\r\n  allocate(array1(10))\r\n  allocate(array2(10,10))\r\n\r\n  ! ...\r\n\r\n  deallocate(array1)\r\n  deallocate(array2)\r\n\r\nend program allocatable\r\n"

- title: Character strings
  content: Example - static character string
  code: "program string\r\n  implicit none\r\n\r\n  character(len=4) :: first_name\r\n  character(len=5) :: last_name\r\n  character(10) :: full_name\r\n\r\n  first_name = 'John'\r\n  last_name = 'Smith'\r\n\r\n  ! String concatenation\r\n  full_name = first_name//' '//last_name\r\n\r\n  print *, full_name\r\n\r\nend program string\r\n"

- title: Character strings
  content: Example - allocatable character string
  code: "program allocatable_string\r\n  implicit none\r\n\r\n  character(:), allocatable :: first_name\r\n  character(:), allocatable :: last_name\r\n\r\n  ! Explicit allocation statement\r\n  allocate(character(4) :: first_name)\r\n  first_name = 'John'\r\n\r\n  ! Allocation on assignment\r\n  last_name = 'Smith'\r\n\r\n  print *, first_name//' '//last_name\r\n\r\nend program allocatable_string\r\n"

- title: Array of strings
  content: An array of strings can be expressed in Fortran as an array of character variables. All elements in a character array have equal length. However, strings of varying lengths can be provided as input to the array constructor, as shown in the example below. They will be truncated or right-padded with spaces if they are longer or shorter, respectively, than the declared length of the character array. Finally, we use the intrinsic function trim to remove any excess spaces when printing the values to the standard output.
  code: "program string_array\r\n  implicit none\r\n  character(len=10), dimension(2) :: keys, vals\r\n\r\n  keys = [character(len=10) :: \"user\", \"dbname\"]\r\n  vals = [character(len=10) :: \"ben\", \"motivation\"]\r\n\r\n  call show(keys, vals)\r\n\r\n  contains\r\n\r\n  subroutine show(akeys, avals)\r\n    character(len=*), intent(in) :: akeys(:), avals(:)\r\n    integer                      :: i\r\n\r\n    do i = 1, size(akeys)\r\n      print *, trim(akeys(i)), \": \", trim(avals(i))\r\n    end do\r\n\r\n  end subroutine show\r\n\r\nend program string_array\r\n"

- title: Operators and flow control
  content: | 
    One of the powerful advantages of computer algorithms, compared to simple mathematical formulae, comes in the form of program branching whereby the program can decide which instructions to execute next based on a logical condition.
    There are two main forms of controlling program flow:
    Conditional (if): choose program path based on a boolean (true or false) value
    Loop: repeat a portion of code multiple times
  code : ""

- title: Relational operators
  content: |
    Before we use a conditional branching operator, we need to be able to form a logical expression.
    To form a logical expression, the following set of relational operators are available:
    Operator - Alternative -  Description
    ==       -    .eq.     -  Tests for equality of two operands
    /=            .ne.        Test for inequality of two operands
    >             .gt.        Tests if left operand is strictly greater than right operand
    <             .lt.        Tests if left operand is strictly less than right operand
    >=            .ge.        Tests if left operand is greater than or equal to right operand
    <=            .le.        Tests if left operand is less than or equal to right operand
  code: ""

- title: Logical Operators
  content: |
    Thereâ€™s  the following logical operators:
    .and.   TRUE if both left and right operands are TRUE
    .or.    TRUE if either left or right or both operands are TRUE
    .not.   TRUE if right operand is FALSE
    .eqv.   TRUE if left operand has same logical value as right operand
    .neqv.  TRUE if left operand has the opposite logical value as right operand
  code: ""

- title: Conditional construct (if)
  content: In the following examples, a conditional if construct is used to print out a message to describe the nature of the angle variable,
          In this first example, the code within the if construct is only executed if the test expression (angle < 90.0) is true.
          Tip - It is good practice to indent code within constructs such as if and do to make code more readable.

  code: "program conditional\r\n    \r\n    real :: angle\r\n    angle = 60\r\n    \r\n    if (angle < 90.0) then\r\n      print *, 'Angle is acute'\r\n    end if\r\n    \r\nend program conditional\r\n\r\n"

- title: Conditional construct (if-else)
  content: We can add an alternative branch to the construct using the else keyword
  code: "program conditional\r\n    \r\n    real :: angle\r\n    angle = 120\r\n    \r\n    if (angle < 90.0) then\r\n        print *, 'Angle is acute'\r\n    else\r\n        print *, 'Angle is obtuse'\r\n    end if\r\n\r\nend program conditional\r\n\r\n"

- title: Conditional construct (if)
  content: Now there are two branches in the if construct, but only one branch is executed depending on the logical expression following the if keyword.
    We can actually add any number of branches using else if to specify more conditions
    When multiple conditional expressions are used, each conditional expression is tested only if none of the previous expressions have evaluated to true.
  code: "program conditional\r\n    \r\n    real :: angle\r\n    angle = 200\r\n    \r\n    if (angle < 90.0) then\r\n        print *, 'Angle is acute'\r\n    else if (angle < 180.0) then\r\n        print *, 'Angle is obtuse'\r\n    else\r\n        print *, 'Angle is reflex'\r\n    end if\r\n\r\nend program conditional\r\n\r\n"

- title: Loop constructs (do)
  content: |
    In this example, a do loop construct is used to print out the numbers in a sequence.
    The do loop has an integer counter variable which is used to track which iteration
    of the loop is currently executing.
    In this example we use a common name for this counter variable i.
    When we define the start of the do loop, we use our counter variable name followed by an equals (=) sign
    to specify the start value and final value of our counting variable.
  code: "program conditional\r\n    \r\n    integer :: i\r\n\r\n    do i = 1, 10\r\n      print *, i\r\n    end do\r\n\r\nend program conditional\r\n\r\n"

- title: Loop constructs (do)
  content: Here's how to perform a do loop with skip
  code: "program conditional\r\n    \r\n    integer :: i\r\n    \r\n    do i = 1, 10, 2\r\n      print *, i  ! Print odd numbers\r\n    end do\r\n\r\nend program conditional\r\n\r\n"

- title: Conditional loop (do while)
  content: A condition may be added to a do loop with the while keyword. The loop will be executed while the condition given in while() evaluates to .true..
  code: "program loop\r\n    \r\n    integer :: i\r\n    \r\n    i = 1\r\n    do while (i < 11)\r\n      print *, i\r\n      i = i + 1\r\n    end do\r\n    ! Here i = 11\r\n\r\n\r\nend program loop"

- title: Loop control statements (cycle)
  content: Most often than not, loops need to be stopped if a condition is met. Fortran provides two executable statements to deal with such cases.
    exit is used to quit the loop prematurely. It is usually enclosed inside an if.
  code: "program loop\r\n    \r\n    integer :: i\r\n    \r\n    do i = 1, 100\r\n      if (i > 10) then\r\n        exit  ! Stop printing numbers\r\n      end if\r\n      print *, i\r\n    end do\r\n    ! Here i = 11\r\n\r\nend program loop"

- title: Loop control statements (cycle)
  content: On the other hand, cycle skips whatever is left of the loop and goes into the next cycle.
    Note - When used within nested loops, the cycle and exit statements operate on the innermost loop.
  code: "program loop\r\n    \r\n    integer :: i\r\n    \r\n    do i = 1, 10\r\n      if (mod(i, 2) == 0) then\r\n          cycle  ! Don't print even numbers\r\n      end if\r\n      print *, i\r\n    end do\r\n\r\nend program loop"

- title: Nested loop control - tags
  content: |
    A recurring case in any programming language is the use of nested loops. Nested loops refer to loops that exist within another loop. Fortran allows the programmer to tag or name each loop. If loops are tagged, there are two potential benefits:
    1. The readability of the code may be improved (when the naming is meaningful).
    2. exit and cycle may be used with tags, which allows for very fine-grained control of the loops.
  code: "program nested\r\n    \r\n    integer :: i, j\r\n    \r\n    outer_loop: do i = 1, 10\r\n      inner_loop: do j = 1, 10\r\n        if ((j + i) > 10) then  ! Print only pairs of i and j that add up to 10\r\n          cycle outer_loop  ! Go to the next iteration of the outer loop\r\n        end if\r\n        print *, 'I=', i, ' J=', j, ' Sum=', j + i\r\n      end do inner_loop\r\n    end do outer_loop\r\n    \r\n        do i = 1, 10\r\n          if (mod(i, 2) == 0) then\r\n              cycle  ! Don't print even numbers\r\n          end if\r\n          print *, i\r\n        end do\r\n\r\nend program nested"

- title: Parallelizable loop (do concurrent)
  content: The do concurrent loop is used to explicitly specify that the inside of the loop has no interdependencies; this informs the compiler that it may use parallelization/SIMD to speed up execution of the loop and conveys programmer intention more clearly. More specifically, this means that any given loop iteration does not depend on the prior execution of other loop iterations. It is also necessary that any state changes that may occur must only happen within each do concurrent loop. These requirements place restrictions on what can be placed within the loop body.
  code: "program nested\r\n    \r\n    real, parameter :: pi = 3.14159265\r\n    integer, parameter :: n = 10\r\n    real :: result_sin(n)\r\n    integer :: i\r\n    \r\n    do concurrent (i = 1:n)  ! Careful, the syntax is slightly different\r\n      result_sin(i) = sin(i * pi/4.)\r\n    end do\r\n    \r\n    print *, result_sin\r\n\r\nend program nested"

- title: Parallelizable loop (do concurrent)
  content: Important - Simply replacing a do loop with a do concurrent does not guarantee parallel execution. The explanation given above does not detail all the requirements that need to be met in order to write a correct do concurrent loop. Compilers are also free to do as they see fit, meaning they may not optimize the loop (e.g., a small number of iterations doing a simple calculation, like the below example). In general, compiler flags are required to activate possible parallelization for do concurrent loops.
  code: "program nested\r\n    \r\n    real, parameter :: pi = 3.14159265\r\n    integer, parameter :: n = 10\r\n    real :: result_sin(n)\r\n    integer :: i\r\n    \r\n    do concurrent (i = 1:n)  ! Careful, the syntax is slightly different\r\n      result_sin(i) = sin(i * pi/4.)\r\n    end do\r\n    \r\n    print *, result_sin\r\n\r\nend program nested"

- title: Organising code structure
  content: |
    Fortran has two forms of procedure:
    1. Subroutine: invoked by a call statement
    2. Function: invoked within an expression or assignment to which it returns a value
  code: ""

- title: Subroutines
  content: The subroutine input arguments, known as dummy arguments, are specified in parentheses after the subroutine name; the dummy argument types and attributes are declared within the body of the subroutine just like local variables.
  code: "subroutine print_matrix(n,m,A)\r\n  implicit none\r\n  integer, intent(in) :: n\r\n  integer, intent(in) :: m\r\n  real, intent(in) :: A(n, m)\r\n\r\n  integer :: i\r\n\r\n  do i = 1, n\r\n    print *, A(i, 1:m)\r\n  end do\r\n\r\nend subroutine print_matrix\r\n\r\nprogram call_sub\r\n  implicit none\r\n\r\n  real :: mat(10, 20)\r\n\r\n  mat(:,:) = 0.0\r\n\r\n  call print_matrix(10, 20, mat)\r\n\r\nend program call_sub\r\n"

- title: Subroutines
  content: |
    Note the additional intent attribute when declaring the dummy arguments; this optional attribute signifies to the compiler whether the argument is read-only (intent(in)) or write-only (intent(out)) or read-write(intent(inout)) within the procedure. In this example, the subroutine does not modify its arguments, hence all arguments are intent(in).
    Tip: It is good practice to always specify the intent attribute for dummy arguments; this allows the compiler to check for unintentional errors and provides self-documentation.
    We can call this subroutine from a program using a call statement.
  code: "subroutine print_matrix(n,m,A)\r\n  implicit none\r\n  integer, intent(in) :: n\r\n  integer, intent(in) :: m\r\n  real, intent(in) :: A(n, m)\r\n\r\n  integer :: i\r\n\r\n  do i = 1, n\r\n    print *, A(i, 1:m)\r\n  end do\r\n\r\nend subroutine print_matrix\r\n\r\nprogram call_sub\r\n  implicit none\r\n\r\n  real :: mat(10, 20)\r\n\r\n  mat(:,:) = 0.0\r\n\r\n  call print_matrix(10, 20, mat)\r\n\r\nend program call_sub\r\n"

- title: Functions
  content: | 
    Tip: In production code, the intrinsic function norm2 should be used.
    Tip: It is good programming practice for functions not to modify their arguments that is, all function arguments should be intent(in). Such functions are known as pure functions. Use subroutines if your procedure needs to modify its arguments.
  code: "function vector_norm(n,vec) result(norm)\r\n  implicit none\r\n  integer, intent(in) :: n\r\n  real, intent(in) :: vec(n)\r\n  real :: norm\r\n\r\n  norm = sqrt(sum(vec**2))\r\n\r\nend function vector_norm\r\n\r\nprogram run_fcn\r\n  implicit none\r\n\r\n  real :: v(9)\r\n  real :: vector_norm\r\n\r\n  v(:) = 9\r\n\r\n  print *, 'Vector norm = ', vector_norm(9,v)\r\n\r\nend program run_fcn\r\n"


  